PostgreSQL provides several index types: B-tree, Hash, GiST and GIN. Each index type uses a different algorithm that is best suited to different types of queries. By default, the CREATE INDEX command creates B-tree indexes, which fit the most common situations.


B-tree indexes are using B-tree data structure. It support operations: <, <=, =, >=, >.
Also their combinations such as BETWEEN and IN.
Additionally it supports LIKE and ~ if the pattern is a constant and is anchored to the beginning of the string.
For example, col LIKE 'foo%' or col ~ '^foo', but not col LIKE '%bar'.
B-tree indexes can also be used to retrieve data in sorted order. This is not always faster than a simple scan and sort, but it is often helpful.

Hash indexes can only handle simple equality comparisons.

GiST indexes are not a single kind of index, but rather an infrastructure within which many different indexing strategies can be implemented. Accordingly, the particular operators with which a GiST index can be used vary depending on the indexing strategy (the operator class).

GIN indexes are inverted indexes which can handle values that contain more than one key, arrays for example. Like GiST, GIN can support many different user-defined indexing strategies and the particular operators with which a GIN index can be used vary depending on the indexing strategy. As an example, the standard distribution of PostgreSQL includes GIN operator classes for one-dimensional arrays, which support indexed queries using these operators: <@, @>, =, &&.


B-tree, GiST and GIN index types support multicolumn indexes.
Only B-tree can produce sorted output â€” the other index types return matching rows in an unspecified, implementation-dependent order.
Only B-tree indexes can be declared unique.
Indexing can be done for expression.


A partial index is an index built over a subset of a table; the subset is defined by a conditional expression (called the predicate of the partial index). The index contains entries only for those table rows that satisfy the predicate. Partial indexes are a specialized feature, but there are several situations in which they are useful.


SOURCES:
1. https://www.postgresql.org/docs/9.1/static/indexes.html
